type Query {
  info: String!
  feed(
    filter: String
    skip: Int
    take: Int
    orderBy: PropertyOrderByInput
  ): Feed!
}

type Feed {
  id: ID!
  properties: [Property!]!
  count: Int!
}

type Mutation {
  post(url: String!, description: String!): Property!
  signup(
    email: String!
    password: String!
    name: String!
  ): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(propertyID: ID!): Vote
}

type Subscription {
  newProperty: Property
  newVote: Vote
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  properties: [Property!]!
}

type Property {
  id: ID!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
  createdAt: DateTime!
}

type Vote {
  id: ID!
  property: Property!
  user: User!
}

input PropertyOrderByInput {
  description: Sort
  url: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}

scalar DateTime
