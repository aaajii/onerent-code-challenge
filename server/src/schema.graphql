type Query {
  info: String!
  feed(
    filter: String
    skip: Int
    take: Int
    orderBy: PropertyOrderByInput
  ): Feed!
}

type Feed {
  id: ID!
  properties: [Property!]!
  count: Int!
}

type Mutation {
  post(street: String!, state: String!, city: String!, zip: Int!): Property!
  signup(
    email: String!
    password: String!
    firstName: String!
    lastName: String!
  ): AuthPayload
  login(email: String!, password: String!): AuthPayload
  rent(propertyId: ID!): Rent
}

type Subscription {
  newProperty: Property
  newRent: Rent
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  rents: [Rent!]!
}

type Property {
  id: ID!
  street: String!
  city: String!
  state: String!
  zip: Int!
  renters: [Rent!]
  createdAt: DateTime!
}

type Rent {
  id: ID!
  property: Property!
  user: User!
}

input PropertyOrderByInput {
  street: Sort
  city: Sort
  state: Sort
  zip: Sort
  createdAt: Sort
}

enum Sort {
  asc
  desc
}

scalar DateTime
